@page "/Admin/Orders/Ready"

@inject IStore Store


<style>
  #order_page {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
  }
  
  #order_page #title_search {
    width: 850px;
  }
  
  #order_page #contents {
    width: 700px;
  }
</style>



<PageTitle>Orders</PageTitle>

<div id="order_page">
  <div id="title_search"> 
    <OrderSearchBar Title="Ready Orders" InitialList="orders" @bind-ResultList="filteredOrders" />
  </div>
  
  <div id="contents">
    <Orders FilteredOrders="filteredOrders" Methods="methods" />
  </div>
</div>

  
  
@code {
  private IReadOnlyList<OrderInfo> orders;
  
  private List<OrderInfo> filteredOrders;
  
  private Dictionary<string, Func<object, Task>> methods = new();
  
  protected override async Task OnInitializedAsync()
  {
    orders = await Store.ReadyOrdersAsync();
    
    filteredOrders = new(orders);
    
    methods.Add("Deliver", DeliverAsync);
    methods.Add("Cancel", CancelAsync);
  }
  
  public async Task DeliverAsync(object order)
  {
    Store.ChangeTo((order as OrderInfo).ID, OrderState.DELIVERED);
    
    await Reload();
  }
  
  public async Task CancelAsync(object order)
  {
    Store.ChangeTo((order as OrderInfo).ID, OrderState.CANCELLED);
    
    await Reload();
  }
  
  private async Task Reload()
  {
    orders = await Store.ReadyOrdersAsync();
    
    filteredOrders = new(orders);
    
    await InvokeAsync(() => StateHasChanged());
  }
}
